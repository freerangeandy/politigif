{"version":3,"sources":["GifEncoder.js"],"names":[],"mappings":"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","file":"GifEncoder.js","sourcesContent":["/**\r\n * This class lets you encode animated GIF files\r\n * Base class :  http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @version 0.1 AS3 implementation\r\n */\r\n\r\nimport 'babel-polyfill';\r\nimport GifWriter from './GifWriter.js';\r\nimport ImageEncoder from './ImageEncoder.js';\r\n\r\nexport default class GifEncoder {\r\n\tconstructor() {\r\n\t\tthis.images = [];\r\n\r\n\t\tthis.size = [320, 240];\r\n\t\tthis.transparentColor = undefined;\r\n\t\tthis.loopCount = undefined;\r\n\t\tthis.fps = 1;\r\n\t\tthis.disposalMethod = 0;\r\n\t\tthis.samplingFactor = 10;\r\n\t\tthis.comment = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the delay time between each frame, or changes it for subsequent frames\r\n\t * (applies to last frame added)\r\n\t * int delay time in milliseconds\r\n\t * @param milliseconds\r\n\t * NOT MILLISECONDS BUT 100ths of a second!!!!!\r\n\t */\r\n\tget delayTime() {\r\n\t\treturn this._delayTime;\r\n\t}\r\n\tset delayTime(delayTime) {\r\n\t\tif (!Number.isInteger(delayTime) || delayTime < 0 || delayTime > 65535) {\r\n\t\t\tthrow new Error('Property \"delayTime\" must be an integer between 0 and 65535.');\r\n\t\t}\r\n\r\n\t\tthis._delayTime = delayTime;\r\n\t}\r\n\r\n\t/**\r\n\t * * Sets frame rate in frames per second. Equivalent to\r\n\t * <code>setDelay(1000/fps)</code>.\r\n\t * @param fps\r\n\t * float frame rate (frames per second)\r\n\t */\r\n\tset fps(fps) {\r\n\t\tif (!Number.isInteger(fps)) {\r\n\t\t\tthrow new Error('Property \"fps\" must be an integer.');\r\n\t\t}\r\n\r\n\t\tif (fps == 0xF) {\r\n\t\t\tthrow new Error('???');\r\n\t\t}\r\n\r\n\t\tthis.delayTime = 100 / fps;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the GIF frame disposal code for the last added frame and any\r\n\t *\r\n\t * subsequent frames.\r\n\t *\r\n\t * 0: No disposal specified. The decoder is not required to take any action.\r\n\t * 1: Do not dispose. The graphic is to be left in place.\r\n\t * 2: Restore to background color. The area used by the graphic must be restored to the background color.\r\n\t * 3: Restore to previous. The decoder is required to restore the area overwritten by the graphic with what was there prior to rendering the graphic.\r\n\t * 4-7: To be defined.\r\n\t * @param code\r\n\t * int disposal code.\r\n\t */\r\n\tget disposalMethod() {\r\n\t\treturn this._disposalMethod;\r\n\t}\r\n\tset disposalMethod(disposalMethod) {\r\n\t\tif (!Number.isInteger(disposalMethod) || disposalMethod < 0 || disposalMethod > 7) {\r\n\t\t\tthrow new Error('Property \"disposalMethod\" must be an integer between 0 and 7.');\r\n\t\t}\r\n\r\n\t\tthis._disposalMethod = disposalMethod;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the number of times the set of GIF frames should be played. Default is\r\n\t * 1; 0 means play indefinitely. Must be invoked before the first image is\r\n\t * added.\r\n\t *\r\n\t * @param iter\r\n\t * int number of iterations.\r\n\t * @return\r\n\t */\r\n\tget loopCount() {\r\n\t\treturn this._loopCount;\r\n\t}\r\n\tset loopCount(loopCount) {\r\n\t\tif (loopCount !== undefined && !Number.isInteger(loopCount) || loopCount < 0 || loopCount > 65535) {\r\n\t\t\tthrow new Error('Property \"loopCount\" must be an integer between 0 and 65535 or undefined.');\r\n\t\t}\r\n\r\n\t\tthis._loopCount = loopCount;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the transparent color for the last added frame and any subsequent\r\n\t * frames. Since all colors are subject to modification in the quantization\r\n\t * process, the color in the final palette for each frame closest to the given\r\n\t * color becomes the transparent color for that frame. May be set to null to\r\n\t * indicate no transparent color.\r\n\t * @param color\r\n\t * Color to be treated as transparent on display.\r\n\t */\r\n\tget transparentColor() {\r\n\t\treturn this._transparentColor;\r\n\t}\r\n\tset transparentColor(transparentColor) {\r\n\t\t// TODO: Check value\r\n\r\n\t\tthis._transparentColor = transparentColor;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the comment for the block comment\r\n\t * @param comment\r\n\t * string to be insterted as comment\r\n\t */\r\n\tget comment() {\r\n\t\treturn this._comment;\r\n\t}\r\n\tset comment(comment) {\r\n\t\tif (comment !== undefined && typeof comment !== 'string') {\r\n\t\t\tthrow new Error('Property \"comment\" must be a string or undefined.');\r\n\t\t}\r\n\r\n\t\tthis._comment = comment;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets quality of color quantization (conversion of images to the maximum 256\r\n\t * colors allowed by the GIF specification). Lower values (minimum = 1)\r\n\t * produce better colors, but slow processing significantly. 10 is the\r\n\t * default, and produces good color mapping at reasonable speeds. Values\r\n\t * greater than 20 do not yield significant improvements in speed.\r\n\t * @param quality\r\n\t * int greater than 0.\r\n\t * @return\r\n\t */\r\n\tget samplingFactor() {\r\n\t\treturn this._samplingFactor;\r\n\t}\r\n\tset samplingFactor(samplingFactor) {\r\n\t\tif (!Number.isInteger(samplingFactor) || samplingFactor < 1 || samplingFactor > 256) {\r\n\t\t\tthrow new Error('Property \"samplingFactor\" must be an integer between 1 and 256.');\r\n\t\t}\r\n\r\n\t\tthis._samplingFactor = samplingFactor;\r\n\t}\r\n\r\n\tget width() {\r\n\t\treturn this._width;\r\n\t}\r\n\tset width(width) {\r\n\t\tif (!Number.isInteger(width) || width < 1 || width > 65535) {\r\n\t\t\tthrow new Error('Property \"width\" must be an integer between 1 and 65535.');\r\n\t\t}\r\n\r\n\t\tthis._width = width;\r\n\t}\r\n\r\n\tget height() {\r\n\t\treturn this._height;\r\n\t}\r\n\tset height(height) {\r\n\t\tif (!Number.isInteger(height) || height < 1 || height > 65535) {\r\n\t\t\tthrow new Error('Property \"height\" must be an integer between 1 and 65535.');\r\n\t\t}\r\n\r\n\t\tthis._height = height;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the GIF frame size. The default size is the size of the first frame\r\n\t * added if this method is not invoked.\r\n\t * @param w\r\n\t * int frame width.\r\n\t * @param h\r\n\t * int frame width.\r\n\t */\r\n\tget size() {\r\n \t\treturn [this._width, this._height];\r\n \t}\r\n \tset size([width, height]) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n \t}\r\n\r\n\t/**\r\n\t * The addImage method takes an incoming BitmapData object to create each frames\r\n\t * @param\r\n\t * BitmapData object to be treated as a GIF's frame\r\n\t */\r\n\taddImage(image, left, top, width, height, disposalMethod, delayTime, transparentColor) {\r\n\t\t// Check image\r\n\t\tlet rgbaPixels;\r\n\t\tif (image instanceof CanvasRenderingContext2D) {\r\n\t\t\t// User passed a context\r\n\t\t\trgbaPixels = image.getImageData(0, 0, image.canvas.width, image.canvas.height).data;\r\n\t\t} else if (image instanceof ImageData) {\r\n\t\t\t// User passed context.getImageData(...)\r\n\t\t\trgbaPixels = image.data;\r\n\t\t} else if (image instanceof Uint8ClampedArray) {\r\n\t\t\t// User passed context.getImageData(...).data\r\n\t\t\trgbaPixels = image;\r\n\t\t} else {\r\n\t\t\tthrow new Error('Parameter \"image\" must be a CanvasRenderingContext2D, ImageData or Uint8ClampedArray.');\r\n\t\t}\r\n\r\n\t\tthis.images.push([rgbaPixels, left, top, width, height, disposalMethod, delayTime, transparentColor]);\r\n\t}\r\n\r\n\tasync encode() {\r\n\t\tif (!this.images.length) {\r\n\t\t\tthrow new Error('No images added. Use addImage() to add images.');\r\n\t\t}\r\n\r\n\t\tconst gifWriter = new GifWriter();\r\n\r\n\t\tgifWriter.writeHeader();\r\n\r\n\t\tgifWriter.writeLogicalScreenDescriptor(\r\n\t\t\tthis.width,\r\n\t\t\tthis.height,\r\n\t\t\t0,\r\n\t\t\t7,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\t0\r\n\t\t);\r\n\r\n\t\tif (this.comment) {\r\n\t\t\tgifWriter.writeCommentExtension(this.comment);\r\n\t\t}\r\n\r\n\t\tif (this.loopCount !== undefined) {\r\n\t\t\tgifWriter.writeNetscapeLoopingApplicationExtension(this.loopCount);\r\n\t\t}\r\n\r\n\t\t// Initialize the ImageEncoder which will take care of generating\r\n\t\t// Local Color Table and LZW-encoded Table Based Image Data\r\n\t\tconst imageEncoder = new ImageEncoder();\r\n\r\n\t\t// Loop images\r\n\t\tfor (const image of this.images) {\r\n\t\t\tconst [\r\n\t\t\t\trgbaPixels,\r\n\t\t\t\tleft = 0,\r\n\t\t\t\ttop = 0,\r\n\t\t\t\twidth = this.width,\r\n\t\t\t\theight = this.height,\r\n\t\t\t\tdisposalMethod = this.disposalMethod,\r\n\t\t\t\tdelayTime = this.delayTime,\r\n\t\t\t\ttransparentColor = this.transparentColor,\r\n\t\t\t] = image;\r\n\r\n\t\t\t// Encode the image\r\n\t\t\tconst [\r\n\t\t\t\tlocalColorTable,\r\n\t\t\t\ttransparentColorIndex,\r\n\t\t\t\ttableBasedImageData\r\n\t\t\t] = imageEncoder.encodeImage(rgbaPixels, this.samplingFactor, width, height, transparentColor);\r\n\r\n\t\t\t// Write the image\r\n\t\t\tgifWriter.writeImage(\r\n\t\t\t\tleft,\r\n\t\t\t\ttop,\r\n\t\t\t\twidth,\r\n\t\t\t\theight,\r\n\t\t\t\tdisposalMethod,\r\n\t\t\t\tdelayTime,\r\n\t\t\t\ttransparentColorIndex,\r\n\t\t\t\tlocalColorTable,\r\n\t\t\t\ttableBasedImageData\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Write Trailer\r\n\t\tgifWriter.writeTrailer();\r\n\r\n\t\treturn gifWriter.getData();\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}