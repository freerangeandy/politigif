{"version":3,"sources":["NeuQuant.js"],"names":[],"mappings":"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","file":"NeuQuant.js","sourcesContent":["/*\r\n * NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\r\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n */\r\n\r\n/*\r\n * This class handles Neural-Net quantization algorithm\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @version 0.1 AS3 implementation\r\n */\r\n\r\nexport default class NeuQuant {\r\n\tconstructor() {\r\n\t\tvar exports = {};\r\n\t\tvar netsize = 256; /* number of colours used */\r\n\r\n\t\t/* four primes near 500 - assume no image has a length so large */\r\n\t\t/* that it is divisible by all four primes */\r\n\r\n\t\tvar prime1 = 499;\r\n\t\tvar prime2 = 491;\r\n\t\tvar prime3 = 487;\r\n\t\tvar prime4 = 503;\r\n\t\tvar minpicturebytes = (3 * prime4); /* minimum size for input image */\r\n\r\n\t\t/*\r\n\t\t * Program Skeleton ---------------- [select samplefac in range 1..30] [read\r\n\t\t * image from input file] pic = (unsigned char*) malloc(3*width*height);\r\n\t\t * initnet(pic,3*width*height,samplefac); learn(); unbiasnet(); [write output\r\n\t\t * image header, using writecolourmap(f)] inxbuild(); write output image using\r\n\t\t * inxsearch(b,g,r)\r\n\t\t */\r\n\r\n\t\t/*\r\n\t\t * Network Definitions -------------------\r\n\t\t */\r\n\r\n\t\tvar maxnetpos = (netsize - 1);\r\n\t\tvar netbiasshift = 4; /* bias for colour values */\r\n\t\tvar ncycles = 100; /* no. of learning cycles */\r\n\r\n\t\t/* defs for freq and bias */\r\n\t\tvar intbiasshift = 16; /* bias for fractions */\r\n\t\tvar intbias = (1 << intbiasshift);\r\n\t\tvar gammashift = 10; /* gamma = 1024 */\r\n\t\tvar gamma = (1 << gammashift);\r\n\t\tvar betashift = 10;\r\n\t\tvar beta = (intbias >> betashift); /* beta = 1/1024 */\r\n\t\tvar betagamma = (intbias << (gammashift - betashift));\r\n\r\n\t\t/* defs for decreasing radius factor */\r\n\t\tvar initrad = (netsize >> 3); /* for 256 cols, radius starts */\r\n\t\tvar radiusbiasshift = 6; /* at 32.0 biased by 6 bits */\r\n\t\tvar radiusbias = (1 << radiusbiasshift);\r\n\t\tvar initradius = (initrad * radiusbias); /* and decreases by a */\r\n\t\tvar radiusdec = 30; /* factor of 1/30 each cycle */\r\n\r\n\t\t/* defs for decreasing alpha factor */\r\n\t\tvar alphabiasshift = 10; /* alpha starts at 1.0 */\r\n\t\tvar initalpha = (1 << alphabiasshift);\r\n\t\tvar alphadec; /* biased by 10 bits */\r\n\r\n\t\t/* radbias and alpharadbias used for radpower calculation */\r\n\t\tvar radbiasshift = 8;\r\n\t\tvar radbias = (1 << radbiasshift);\r\n\t\tvar alpharadbshift = (alphabiasshift + radbiasshift);\r\n\t\tvar alpharadbias = (1 << alpharadbshift);\r\n\r\n\t\t/*\r\n\t\t * Types and Global Variables --------------------------\r\n\t\t */\r\n\r\n\t\tvar thepicture; /* the input image itself */\r\n\t\tvar lengthcount; /* lengthcount = H*W*3 */\r\n\t\tvar samplefac; /* sampling factor 1..30 */\r\n\r\n\t\t// typedef int pixel[4]; /* BGRc */\r\n\t\tvar network; /* the network itself - [netsize][4] */\r\n\t\tvar netindex = [];\r\n\r\n\t\t/* for network lookup - really 256 */\r\n\t\tvar bias = [];\r\n\r\n\t\t/* bias and freq arrays for learning */\r\n\t\tvar freq = [];\r\n\t\tvar radpower = [];\r\n\r\n\t\tvar NeuQuant = exports.NeuQuant = function NeuQuant(thepic, len, sample) {\r\n\r\n\t\t\tvar i;\r\n\t\t\tvar p;\r\n\r\n\t\t\tthepicture = thepic;\r\n\t\t\tlengthcount = len;\r\n\t\t\tsamplefac = sample;\r\n\r\n\t\t\tnetwork = new Array(netsize);\r\n\r\n\t\t\tfor (i = 0; i < netsize; i++) {\r\n\r\n\t\t\t\tnetwork[i] = new Array(4);\r\n\t\t\t\tp = network[i];\r\n\t\t\t\tp[0] = p[1] = p[2] = (i << (netbiasshift + 8)) / netsize;\r\n\t\t\t\tfreq[i] = intbias / netsize; /* 1/netsize */\r\n\t\t\t\tbias[i] = 0;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar colorMap = function colorMap() {\r\n\r\n\t\t\tvar map = [];\r\n\t\t\tvar index = new Array(netsize);\r\n\r\n\t\t\tfor (var i = 0; i < netsize; i++)\r\n\t\t\t\tindex[network[i][3]] = i;\r\n\r\n\t\t\tvar k = 0;\r\n\t\t\tfor (var l = 0; l < netsize; l++) {\r\n\t\t\t\tvar j = index[l];\r\n\t\t\t\tmap[k++] = (network[j][0]);\r\n\t\t\t\tmap[k++] = (network[j][1]);\r\n\t\t\t\tmap[k++] = (network[j][2]);\r\n\t\t\t}\r\n\r\n\t\t\treturn map;\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * Insertion sort of network and building of netindex[0..255] (to do after\r\n\t\t * unbias)\r\n\t\t * -------------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tvar inxbuild = function inxbuild() {\r\n\r\n\t\t\tvar i;\r\n\t\t\tvar j;\r\n\t\t\tvar smallpos;\r\n\t\t\tvar smallval;\r\n\t\t\tvar p;\r\n\t\t\tvar q;\r\n\t\t\tvar previouscol;\r\n\t\t\tvar startpos;\r\n\r\n\t\t\tpreviouscol = 0;\r\n\t\t\tstartpos = 0;\r\n\t\t\tfor (i = 0; i < netsize; i++) {\r\n\r\n\t\t\t\tp = network[i];\r\n\t\t\t\tsmallpos = i;\r\n\t\t\t\tsmallval = p[1]; /* index on g */\r\n\r\n\t\t\t\t/* find smallest in i..netsize-1 */\r\n\t\t\t\tfor (j = i + 1; j < netsize; j++) {\r\n\r\n\t\t\t\t\tq = network[j];\r\n\t\t\t\t\tif (q[1] < smallval) { /* index on g */\r\n\t\t\t\t\t\tsmallpos = j;\r\n\t\t\t\t\t\tsmallval = q[1]; /* index on g */\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tq = network[smallpos];\r\n\r\n\t\t\t\t/* swap p (i) and q (smallpos) entries */\r\n\t\t\t\tif (i != smallpos) {\r\n\t\t\t\t\tj = q[0];\r\n\t\t\t\t\tq[0] = p[0];\r\n\t\t\t\t\tp[0] = j;\r\n\t\t\t\t\tj = q[1];\r\n\t\t\t\t\tq[1] = p[1];\r\n\t\t\t\t\tp[1] = j;\r\n\t\t\t\t\tj = q[2];\r\n\t\t\t\t\tq[2] = p[2];\r\n\t\t\t\t\tp[2] = j;\r\n\t\t\t\t\tj = q[3];\r\n\t\t\t\t\tq[3] = p[3];\r\n\t\t\t\t\tp[3] = j;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* smallval entry is now in position i */\r\n\r\n\t\t\t\tif (smallval != previouscol) {\r\n\r\n\t\t\t\t\tnetindex[previouscol] = (startpos + i) >> 1;\r\n\r\n\t\t\t\t\tfor (j = previouscol + 1; j < smallval; j++) netindex[j] = i;\r\n\r\n\t\t\t\t\tpreviouscol = smallval;\r\n\t\t\t\t\tstartpos = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnetindex[previouscol] = (startpos + maxnetpos) >> 1;\r\n\t\t\tfor (j = previouscol + 1; j < 256; j++) netindex[j] = maxnetpos; /* really 256 */\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * Main Learning Loop ------------------\r\n\t\t */\r\n\r\n\t\tvar learn = function learn() {\r\n\r\n\t\t\tvar i;\r\n\t\t\tvar j;\r\n\t\t\tvar b;\r\n\t\t\tvar g;\r\n\t\t\tvar r;\r\n\t\t\tvar radius;\r\n\t\t\tvar rad;\r\n\t\t\tvar alpha;\r\n\t\t\tvar step;\r\n\t\t\tvar delta;\r\n\t\t\tvar samplepixels;\r\n\t\t\tvar p;\r\n\t\t\tvar pix;\r\n\t\t\tvar lim;\r\n\r\n\t\t\tif (lengthcount < minpicturebytes) samplefac = 1;\r\n\r\n\t\t\talphadec = 30 + ((samplefac - 1) / 3);\r\n\t\t\tp = thepicture;\r\n\t\t\tpix = 0;\r\n\t\t\tlim = lengthcount;\r\n\t\t\tsamplepixels = lengthcount / (3 * samplefac);\r\n\t\t\tdelta = (samplepixels / ncycles) | 0;\r\n\t\t\talpha = initalpha;\r\n\t\t\tradius = initradius;\r\n\r\n\t\t\trad = radius >> radiusbiasshift;\r\n\t\t\tif (rad <= 1) rad = 0;\r\n\r\n\t\t\tfor (i = 0; i < rad; i++) radpower[i] = alpha * (((rad * rad - i * i) * radbias) / (rad * rad));\r\n\r\n\t\t\tif (lengthcount < minpicturebytes) step = 3;\r\n\r\n\t\t\telse if ((lengthcount % prime1) !== 0) step = 3 * prime1;\r\n\r\n\t\t\telse {\r\n\r\n\t\t\t\tif ((lengthcount % prime2) !== 0) step = 3 * prime2;\r\n\t\t\t\telse {\r\n\t\t\t\t\tif ((lengthcount % prime3) !== 0) step = 3 * prime3;\r\n\t\t\t\t\telse step = 3 * prime4;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\ti = 0;\r\n\t\t\twhile (i < samplepixels) {\r\n\r\n\t\t\t\tb = (p[pix + 0] & 0xff) << netbiasshift;\r\n\t\t\t\tg = (p[pix + 1] & 0xff) << netbiasshift;\r\n\t\t\t\tr = (p[pix + 2] & 0xff) << netbiasshift;\r\n\t\t\t\tj = contest(b, g, r);\r\n\r\n\t\t\t\taltersingle(alpha, j, b, g, r);\r\n\t\t\t\tif (rad !== 0) alterneigh(rad, j, b, g, r); /* alter neighbours */\r\n\r\n\t\t\t\tpix += step;\r\n\t\t\t\tif (pix >= lim) pix -= lengthcount;\r\n\r\n\t\t\t\ti++;\r\n\r\n\t\t\t\tif (delta === 0) delta = 1;\r\n\r\n\t\t\t\tif (i % delta === 0) {\r\n\t\t\t\t\talpha -= alpha / alphadec;\r\n\t\t\t\t\tradius -= radius / radiusdec;\r\n\t\t\t\t\trad = radius >> radiusbiasshift;\r\n\r\n\t\t\t\t\tif (rad <= 1) rad = 0;\r\n\r\n\t\t\t\t\tfor (j = 0; j < rad; j++) radpower[j] = alpha * (((rad * rad - j * j) * radbias) / (rad * rad));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t ** Search for BGR values 0..255 (after net is unbiased) and return colour\r\n\t\t * index\r\n\t\t * ----------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tvar map = exports.map = function map(b, g, r) {\r\n\r\n\t\t\tvar i;\r\n\t\t\tvar j;\r\n\t\t\tvar dist;\r\n\t\t\tvar a;\r\n\t\t\tvar bestd;\r\n\t\t\tvar p;\r\n\t\t\tvar best;\r\n\r\n\t\t\tbestd = 1000; /* biggest possible dist is 256*3 */\r\n\t\t\tbest = -1;\r\n\t\t\ti = netindex[g]; /* index on g */\r\n\t\t\tj = i - 1; /* start at netindex[g] and work outwards */\r\n\r\n\t\t\twhile ((i < netsize) || (j >= 0)) {\r\n\r\n\t\t\t\tif (i < netsize) {\r\n\t\t\t\t\tp = network[i];\r\n\t\t\t\t\tdist = p[1] - g; /* inx key */\r\n\r\n\t\t\t\t\tif (dist >= bestd) i = netsize; /* stop iter */\r\n\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\t\t\ta = p[0] - b;\r\n\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\tdist += a;\r\n\r\n\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\ta = p[2] - r;\r\n\t\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\t\tdist += a;\r\n\r\n\t\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\t\t\t\tbest = p[3];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (j >= 0) {\r\n\r\n\t\t\t\t\tp = network[j];\r\n\t\t\t\t\tdist = g - p[1]; /* inx key - reverse dif */\r\n\r\n\t\t\t\t\tif (dist >= bestd) j = -1; /* stop iter */\r\n\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\tj--;\r\n\t\t\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\t\t\ta = p[0] - b;\r\n\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\tdist += a;\r\n\r\n\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\ta = p[2] - r;\r\n\t\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\t\tdist += a;\r\n\t\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\t\t\t\tbest = p[3];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn (best);\r\n\t\t};\r\n\r\n\t\tvar process = exports.process = function process() {\r\n\t\t\tlearn();\r\n\t\t\tunbiasnet();\r\n\t\t\tinxbuild();\r\n\t\t\treturn colorMap();\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * Unbias network to give byte values 0..255 and record position i to prepare\r\n\t\t * for sort\r\n\t\t * -----------------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tvar unbiasnet = function unbiasnet() {\r\n\r\n\t\t\tvar i;\r\n\t\t\tvar j;\r\n\r\n\t\t\tfor (i = 0; i < netsize; i++) {\r\n\t\t\t\tnetwork[i][0] >>= netbiasshift;\r\n\t\t\t\tnetwork[i][1] >>= netbiasshift;\r\n\t\t\t\tnetwork[i][2] >>= netbiasshift;\r\n\t\t\t\tnetwork[i][3] = i; /* record colour no */\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in\r\n\t\t * radpower[|i-j|]\r\n\t\t * ---------------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tvar alterneigh = function alterneigh(rad, i, b, g, r) {\r\n\r\n\t\t\tvar j;\r\n\t\t\tvar k;\r\n\t\t\tvar lo;\r\n\t\t\tvar hi;\r\n\t\t\tvar a;\r\n\t\t\tvar m;\r\n\t\t\tvar p;\r\n\r\n\t\t\tlo = i - rad;\r\n\t\t\tif (lo < -1) lo = -1;\r\n\r\n\t\t\thi = i + rad;\r\n\t\t\tif (hi > netsize) hi = netsize;\r\n\r\n\t\t\tj = i + 1;\r\n\t\t\tk = i - 1;\r\n\t\t\tm = 1;\r\n\r\n\t\t\twhile ((j < hi) || (k > lo)) {\r\n\t\t\t\ta = radpower[m++];\r\n\r\n\t\t\t\tif (j < hi) {\r\n\t\t\t\t\tp = network[j++];\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\r\n\t\t\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\r\n\t\t\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\r\n\t\t\t\t\t} catch (e) {} // prevents 1.3 miscompilation\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (k > lo) {\r\n\t\t\t\t\tp = network[k--];\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\r\n\t\t\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\r\n\t\t\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\r\n\t\t\t\t\t} catch (e) {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * Move neuron i towards biased (b,g,r) by factor alpha\r\n\t\t * ----------------------------------------------------\r\n\t\t */\r\n\r\n\t\tvar altersingle = function altersingle(alpha, i, b, g, r) {\r\n\r\n\t\t\t/* alter hit neuron */\r\n\t\t\tvar n = network[i];\r\n\t\t\tn[0] -= (alpha * (n[0] - b)) / initalpha;\r\n\t\t\tn[1] -= (alpha * (n[1] - g)) / initalpha;\r\n\t\t\tn[2] -= (alpha * (n[2] - r)) / initalpha;\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t * Search for biased BGR values ----------------------------\r\n\t\t */\r\n\r\n\t\tvar contest = function contest(b, g, r) {\r\n\r\n\t\t\t/* finds closest neuron (min dist) and updates freq */\r\n\t\t\t/* finds best neuron (min dist-bias) and returns position */\r\n\t\t\t/* for frequently chosen neurons, freq[i] is high and bias[i] is negative */\r\n\t\t\t/* bias[i] = gamma*((1/netsize)-freq[i]) */\r\n\r\n\t\t\tvar i;\r\n\t\t\tvar dist;\r\n\t\t\tvar a;\r\n\t\t\tvar biasdist;\r\n\t\t\tvar betafreq;\r\n\t\t\tvar bestpos;\r\n\t\t\tvar bestbiaspos;\r\n\t\t\tvar bestd;\r\n\t\t\tvar bestbiasd;\r\n\t\t\tvar n;\r\n\r\n\t\t\tbestd = ~ (1 << 31);\r\n\t\t\tbestbiasd = bestd;\r\n\t\t\tbestpos = -1;\r\n\t\t\tbestbiaspos = bestpos;\r\n\r\n\t\t\tfor (i = 0; i < netsize; i++) {\r\n\t\t\t\tn = network[i];\r\n\t\t\t\tdist = n[0] - b;\r\n\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\ta = n[1] - g;\r\n\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\tdist += a;\r\n\t\t\t\ta = n[2] - r;\r\n\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\tdist += a;\r\n\r\n\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\tbestpos = i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbiasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\r\n\r\n\t\t\t\tif (biasdist < bestbiasd) {\r\n\t\t\t\t\tbestbiasd = biasdist;\r\n\t\t\t\t\tbestbiaspos = i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbetafreq = (freq[i] >> betashift);\r\n\t\t\t\tfreq[i] -= betafreq;\r\n\t\t\t\tbias[i] += (betafreq << gammashift);\r\n\t\t\t}\r\n\r\n\t\t\tfreq[bestpos] += beta;\r\n\t\t\tbias[bestpos] -= betagamma;\r\n\t\t\treturn (bestbiaspos);\r\n\t\t};\r\n\r\n\t\tNeuQuant.apply(this, arguments);\r\n\t\treturn exports;\r\n\t}\r\n}\r\n"],"sourceRoot":"/source/"}